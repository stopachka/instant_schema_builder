// (XXX): This is direct copy from @instantdb/core. Right now core is shared
// logic on the frontend, we have things like browser `fetch`. But actually
// we have some logic that is identical on both frontend and backend, so
// really we should probably have another `core` package

type Action = "update" | "link" | "unlink" | "delete";
type EType = string;
type Id = string;
type Args = any;
export type Op = [Action, EType, Id, Args];

export interface TransactionChunk {
  __ops: Op[];
  update: (args: { [attribute: string]: any }) => TransactionChunk;
  link: (args: { [attribute: string]: string }) => TransactionChunk;
  unlink: (args: { [attribute: string]: string }) => TransactionChunk;
  delete: () => TransactionChunk;
}

export interface ETypeChunk {
  [id: Id]: TransactionChunk;
}

export interface EmptyChunk {
  [etype: EType]: ETypeChunk;
}

function transactionChunk(
  etype: EType,
  id: Id,
  prevOps: Op[]
): TransactionChunk {
  return new Proxy({} as TransactionChunk, {
    get: (_target, cmd: keyof TransactionChunk) => {
      if (cmd === "__ops") return prevOps;
      return (args: Args) => {
        return transactionChunk(etype, id, [
          ...prevOps,
          [cmd, etype, id, args],
        ]);
      };
    },
  });
}

function etypeChunk(etype: EType): ETypeChunk {
  return new Proxy(
    {},
    {
      get(_target, id: Id) {
        return transactionChunk(etype, id, []);
      },
    }
  );
}

function emptyChunk(): EmptyChunk {
  return new Proxy(
    {},
    {
      get(_target, ns: EType) {
        return etypeChunk(ns);
      },
    }
  );
}

export const tx = emptyChunk();

export function getOps(x: TransactionChunk): Op[] {
  return x.__ops;
}
